# -*- coding: utf-8 -*-
"""
Created on Mon Nov 28 18:01:39 2022

@author: atrin
"""

# -*- coding: utf-8 -*-
"""
Created on Wed Nov 23 11:14:50 2022

@author: atrin
"""

import os
import time
import matplotlib.pyplot as plt


def dictManager(dic, ext, value=1):
    try:
        dic[ext] += value
    except:
        dic[ext]=value
    return dic
    
def recursiveWalk(startpath,qtt_dict={}, size_dict={}):
    
    
    for root, dirs, files in os.walk(startpath):
        
        for subdir in dirs:
            recursiveWalk(root+subdir,qtt_dict,size_dict)
        
        for file in files:
            file_extension = os.path.splitext(root+file)[1][1:]
            qtt_dict = dictManager(qtt_dict,file_extension)
            
            
            path = os.path.join(root, file)
            size = os.stat(path).st_size 
            size_dict = dictManager(size_dict,file_extension,size)
    
    return [
        dict(sorted(qtt_dict.items(), key=lambda x: x[1],reverse=True)),
        dict(sorted(size_dict.items(), key=lambda x: x[1],reverse=True))
        ]



def readableData(dic,dic2,n=-1,time=-1):
    count = 0

    total = sum(qtt_dict.values())
    length = len(qtt_dict)
    total_size = sum(list(size_dict.values()))
    
    
    print(f"\n\ntotal: {total:,} file(s)")
    print(f"number of extensions: {length:,}")
    print(f"size dict: {total_size:,} bytes")
    print(f"size dict: {round(total_size/1024/1024,3):,} Mb")
    if time >=0:
        print(f"execution time: {round(time,3)} s\n")
    if n > 0:
        print(f"------LIST------- ({n} premiers)\n")
    else:
        print("------LIST------- (all)\n")
    for key,value in dic2.items():
        size = dic2[key]
        print(f'{key.ljust(25,".")} {dic[key]:,} ({round(size/1024/1024,3):,} Mb)'.format())
        count+=1
        if count >=n and n>=0:
            break

def data_visualisation(qtt_dict,size_dict,n=4):
    """
        Parameters:
        *qtt_dict: dictionnary with file extention and number of occurence
        *size_dict: dictionnary with file extention and the related sizes
        *n: number of extentions to show

        Plot a bar chart and pie chart of the selected extentions
    """

    #bar diagramme of files extentions count
    x,y=list(qtt_dict.keys()),list(qtt_dict.values())
    fig, ax = plt.subplots()
    ax.bar(x[:n],y[:n],color="green",width = 0.1)
    title ="The "+str(n)+" first files extentions" 
    plt.title(title)

    # Pie chart of files sizes
    labels = [str(i)+"( "+str(round(j/1024/1024,3))[:5]+" MB)" for i,j in size_dict.items()]
    sizes = list(size_dict.values())
    sizes = [i*100/sum(sizes) for i in sizes]

    fig1, ax1 = plt.subplots()
    ax1.pie(sizes[:n], labels=labels[:n],
            shadow=False, startangle=90)
    ax1.axis('equal')
    ax1.legend(title = "Files type:")
    title1 ="The "+str(n)+" first files extentions sizes"
    plt.title(title1)
    plt.show()



path = str(input("input folder:\n-->"))

print("processing...")
start_time = time.time()
qtt_dict,size_dict = recursiveWalk(path)
end_time = time.time()

readableData(qtt_dict,size_dict,n=10,time = end_time-start_time)

data_visualisation(size_dict, size_dict,10)
